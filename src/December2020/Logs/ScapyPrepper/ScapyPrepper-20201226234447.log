2020-12-26 23:44:47.594 +00:00 [VRB] Started SANS Holiday Hack, December 2020
2020-12-26 23:44:47.613 +00:00 [VRB] Using CTF runner 0.1.0-alpha.19
2020-12-26 23:44:47.615 +00:00 [VRB] Running challange ScapyPrepper
2020-12-26 23:44:47.616 +00:00 [INF] yes

                Welcome to the "Present Packet Prepper" interface! The North Pole could use your help preparing pr
                esent packets for shipment.
                Start by running the task.submit() function passing in a string argument of 'start'.
                Type task.help() for help on this question.

            
2020-12-26 23:44:47.617 +00:00 [INF] task.submit('start')

                Welcome to the "Present Packet Prepper" interface! The North Pole could use your help preparing pr
                esent packets for shipment.
                Start by running the task.submit() function passing in a string argument of 'start'.
                Type task.help() for help on this question.

                Correct! adding a () to a function or class will execute it. Ex - FunctionExecuted()

            
2020-12-26 23:44:47.617 +00:00 [INF] task.submit(send)

                Submit the class object of the scapy module that sends packets at layer 3 of the OSI model.
                
                Correct! The "send" scapy class will send a crafted scapy packet out of a network interface.

            
2020-12-26 23:44:47.617 +00:00 [INF] task.submit(sniff)

                Submit the class object of the scapy module that sniffs network packets and returns those packets in a list.
                
                Correct! the "sniff" scapy class will sniff network traffic and return these packets in a list.

            
2020-12-26 23:44:47.617 +00:00 [INF] task.submit(1)

                Submit the NUMBER only from the choices below that would successfully send a TCP packet and then return the first sniffed response packet to be stored in a variable named "pkt":
                1.pkt = sr1(IP(dst = "127.0.0.1") / TCP(dport = 20))
                2.pkt = sniff(IP(dst = "127.0.0.1") / TCP(dport = 20))
                3.pkt = sendp(IP(dst = "127.0.0.1") / TCP(dport = 20))

                Correct! sr1 will send a packet, then immediately sniff for a response packet.

            
2020-12-26 23:44:47.618 +00:00 [INF] task.submit(rdpcap)

                Submit the class object of the scapy module that can read pcap or pcapng files and return a list of packets.

                Correct! the "rdpcap" scapy class can read pcap files.

            
2020-12-26 23:44:47.618 +00:00 [INF] task.submit(2)

                The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices 
                below that correctly prints a summary of UDP_PACKETS:

                1. UDP_PACKETS.print()
                2. UDP_PACKETS.show()
                3. UDP_PACKETS.list()

                Correct! .show() can be used on lists of packets AND on an individual packet.

            
2020-12-26 23:44:47.619 +00:00 [INF] task.submit(2)

                The variable UDP_PACKETS contains a list of UDP packets. Submit the NUMBER only from the choices 
                below that correctly prints a summary of UDP_PACKETS:

                1. UDP_PACKETS.print()
                2. UDP_PACKETS.show()
                3. UDP_PACKETS.list()

                Correct! .show() can be used on lists of packets AND on an individual packet.

            
2020-12-26 23:44:47.619 +00:00 [INF] task.submit(UDP_PACKETS[0])

                Submit only the first packet found in UDP_PACKETS.

                >>> UDP_PACKETS.show()
                0000 Ether / IP / UDP / DNS Qry "b'www.elves.rule.'"
                0001 Ether / IP / UDP / DNS Ans "10.21.23.12"

                Correct! Scapy packet lists work just like regular python lists so packets can be accessed by their position in the list starting at offset 0.

            
2020-12-26 23:44:47.619 +00:00 [INF]  task.submit(TCP_PACKETS[1][TCP])

                Submit only the entire TCP layer of the second packet in TCP_PACKETS.

                Correct! Most of the major fields like Ether, IP, TCP, UDP, ICMP, DNS, DNSQR, DNSRR, Raw, etc... can be accessed this way. Ex - pkt[IP][TCP]

            
2020-12-26 23:44:47.622 +00:00 [INF] UDP_PACKETS[0][IP].src="127.0.0.1"
task.submit(UDP_PACKETS[0])

                Change the source IP address of the first packet found in UDP_PACKETS to 127.0.0.1 and then submit this modified packet                

                Correct! You can change ALL scapy packet attributes using this method.

            
2020-12-26 23:44:47.623 +00:00 [INF] 

                Submit the password "task.submit('elf_password')" of the user alabaster as found in the packet list TCP_PACKETS.
                

            
2020-12-26 23:44:47.624 +00:00 [VRB] Challenge ScapyPrepper completed
